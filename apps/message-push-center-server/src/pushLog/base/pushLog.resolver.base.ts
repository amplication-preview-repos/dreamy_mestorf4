/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { PushLog } from "./PushLog";
import { PushLogCountArgs } from "./PushLogCountArgs";
import { PushLogFindManyArgs } from "./PushLogFindManyArgs";
import { PushLogFindUniqueArgs } from "./PushLogFindUniqueArgs";
import { CreatePushLogArgs } from "./CreatePushLogArgs";
import { UpdatePushLogArgs } from "./UpdatePushLogArgs";
import { DeletePushLogArgs } from "./DeletePushLogArgs";
import { Message } from "../../message/base/Message";
import { PushLogService } from "../pushLog.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => PushLog)
export class PushLogResolverBase {
  constructor(
    protected readonly service: PushLogService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PushLog",
    action: "read",
    possession: "any",
  })
  async _pushLogsMeta(
    @graphql.Args() args: PushLogCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PushLog])
  @nestAccessControl.UseRoles({
    resource: "PushLog",
    action: "read",
    possession: "any",
  })
  async pushLogs(
    @graphql.Args() args: PushLogFindManyArgs
  ): Promise<PushLog[]> {
    return this.service.pushLogs(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PushLog, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PushLog",
    action: "read",
    possession: "own",
  })
  async pushLog(
    @graphql.Args() args: PushLogFindUniqueArgs
  ): Promise<PushLog | null> {
    const result = await this.service.pushLog(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PushLog)
  @nestAccessControl.UseRoles({
    resource: "PushLog",
    action: "create",
    possession: "any",
  })
  async createPushLog(
    @graphql.Args() args: CreatePushLogArgs
  ): Promise<PushLog> {
    return await this.service.createPushLog({
      ...args,
      data: {
        ...args.data,

        message: args.data.message
          ? {
              connect: args.data.message,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PushLog)
  @nestAccessControl.UseRoles({
    resource: "PushLog",
    action: "update",
    possession: "any",
  })
  async updatePushLog(
    @graphql.Args() args: UpdatePushLogArgs
  ): Promise<PushLog | null> {
    try {
      return await this.service.updatePushLog({
        ...args,
        data: {
          ...args.data,

          message: args.data.message
            ? {
                connect: args.data.message,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PushLog)
  @nestAccessControl.UseRoles({
    resource: "PushLog",
    action: "delete",
    possession: "any",
  })
  async deletePushLog(
    @graphql.Args() args: DeletePushLogArgs
  ): Promise<PushLog | null> {
    try {
      return await this.service.deletePushLog(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Message, {
    nullable: true,
    name: "message",
  })
  @nestAccessControl.UseRoles({
    resource: "Message",
    action: "read",
    possession: "any",
  })
  async getMessage(@graphql.Parent() parent: PushLog): Promise<Message | null> {
    const result = await this.service.getMessage(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
