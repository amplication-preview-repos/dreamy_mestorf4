/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  PushLog as PrismaPushLog,
  Message as PrismaMessage,
} from "@prisma/client";

export class PushLogServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.PushLogCountArgs, "select">): Promise<number> {
    return this.prisma.pushLog.count(args);
  }

  async pushLogs(args: Prisma.PushLogFindManyArgs): Promise<PrismaPushLog[]> {
    return this.prisma.pushLog.findMany(args);
  }
  async pushLog(
    args: Prisma.PushLogFindUniqueArgs
  ): Promise<PrismaPushLog | null> {
    return this.prisma.pushLog.findUnique(args);
  }
  async createPushLog(args: Prisma.PushLogCreateArgs): Promise<PrismaPushLog> {
    return this.prisma.pushLog.create(args);
  }
  async updatePushLog(args: Prisma.PushLogUpdateArgs): Promise<PrismaPushLog> {
    return this.prisma.pushLog.update(args);
  }
  async deletePushLog(args: Prisma.PushLogDeleteArgs): Promise<PrismaPushLog> {
    return this.prisma.pushLog.delete(args);
  }

  async getMessage(parentId: string): Promise<PrismaMessage | null> {
    return this.prisma.pushLog
      .findUnique({
        where: { id: parentId },
      })
      .message();
  }
}
